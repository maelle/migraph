% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/make_play.R
\name{play}
\alias{play}
\alias{play_diffusion}
\alias{play_diffusions}
\alias{play_learning}
\title{Functions to play games on networks}
\usage{
play_diffusion(
  object,
  seeds = 1,
  thresholds = 1,
  latency = 0,
  recovery = 0,
  waning = 0,
  immune = NULL,
  steps
)

play_diffusions(
  object,
  seeds = 1,
  thresholds = 1,
  latency = 0,
  recovery = 0,
  waning = 0,
  immune = NULL,
  steps,
  times = 1000,
  strategy = "sequential",
  verbose = FALSE
)

play_learning(object, beliefs, steps, epsilon = 5e-04)
}
\arguments{
\item{object}{An object of a migraph-consistent class:
\itemize{
\item matrix (adjacency or incidence) from \code{{base}} R
\item edgelist, a data frame from \code{{base}} R or tibble from \code{{tibble}}
\item igraph, from the \code{{igraph}} package
\item network, from the \code{{network}} package
\item tbl_graph, from the \code{{tidygraph}} package
}}

\item{seeds}{A valid mark vector the length of the
number of nodes in the network.}

\item{thresholds}{A numeric vector indicating the thresholds
each node has. By default 1.
If less than 1, the threshold is interpreted as complex,
where the threshold concerns the proportion of contacts.}

\item{recovery}{A proportion indicating the rate of recovery,
\eqn{\gamma}.
For example, if infected individuals take, on average,
four days to recover, then $\gamma = 0.25$.
By default NULL, which means there is no recovery (i.e. an SI model).}

\item{steps}{The number of steps forward in the diffusion to play.
By default the number of nodes in the network.}
}
\description{
Functions to play games on networks
}
\section{Functions}{
\itemize{
\item \code{play_diffusion()}: Playing compartmental diffusion on networks.

\item \code{play_diffusions()}: Playing multiple compartmental diffusions on networks.

\item \code{play_learning()}: Playing DeGroot learning on networks.

}}
\examples{
play_diffusion(generate_smallworld(15, 0.025))
play_diffusion(generate_smallworld(15, 0.025), thresholds = 0.4)
play_diffusion(generate_smallworld(15, 0.025), recovery = 0.4)
play_diffusions(generate_smallworld(15, 0.025))
play_learning(ison_networkers, 
      rbinom(network_nodes(ison_networkers),1,prob = 0.25))
}
\seealso{
Other models: 
\code{\link{regression}},
\code{\link{tests}}
}
\concept{models}
